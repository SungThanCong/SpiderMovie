from django.db import models
from django.utils import timezone
# from django.utils.encoding import python_2_unicode_compatible
from functools import total_ordering

from django.utils.translation import gettext_lazy  as _


@total_ordering
class Bookmark(models.Model):
    url = models.URLField(verbose_name=_('URL'))
    title = models.CharField(verbose_name=_('title'), max_length=255)
    user = models.PositiveIntegerField(verbose_name=_('user'))
    date_add = models.DateTimeField(verbose_name=_('date created'), default=timezone.now)

    class Meta:
        verbose_name = _('bookmark')
        verbose_name_plural = _('bookmarks')
        ordering = ('date_add',)

    def __str__(self):
        return self.title
    
    def __lt__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.title < other.title

    def __eq__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.title == other.title and self.title == other.title

    def __le__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.title <= other.title

    def __gt__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.title > other.title

    def __ge__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.title >= other.title


@total_ordering
class PinnedApplication(models.Model):
    app_label = models.CharField(verbose_name=_('application name'), max_length=255)
    user = models.PositiveIntegerField(verbose_name=_('user'))
    date_add = models.DateTimeField(verbose_name=_('date created'), default=timezone.now)

    class Meta:
        verbose_name = _('pinned application')
        verbose_name_plural = _('pinned applications')
        ordering = ('date_add',)

    def __str__(self):
        return self.app_label

    def __lt__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.app_label < other.app_label

    def __eq__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.app_label == other.app_label and self.app_label == other.app_label

    def __le__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.app_label <= other.app_label

    def __gt__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.app_label > other.app_label

    def __ge__(self, other):
        if not isinstance(other, Bookmark):
            return NotImplemented
        return self.title >= other.title